// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{
    HELLO_GUEST_ELF, HELLO_GUEST_ID
};
use risc0_zkvm::{default_prover, ExecutorEnv};

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    env_logger::init();

    // An executor environment describes the configurations for the zkVM
    // including program inputs.
    // An default ExecutorEnv can be created like so:
    // `let env = ExecutorEnv::builder().build().unwrap();`
    // However, this `env` does not have any inputs.
    //
    // To add add guest input to the executor environment, use
    // ExecutorEnvBuilder::write().
    // To access this method, you'll need to use ExecutorEnv::builder(), which
    // creates an ExecutorEnvBuilder. When you're done adding input, call
    // ExecutorEnvBuilder::build().

    // open the file stories15M.bin, read the content into a buffer, and write the buffer to the env

    // load stories15M.bin as a byte array
    println!("Reading stories15M.bin and tokenizer.bin");
    let ckpt_file_bytes = std::fs::read("stories15M.bin").expect("Unable to read file");
    let tokenizer_file_bytes = std::fs::read("tokenizer.bin").expect("Unable to read file");
    println!("stories15M.bin and tokenizer.bin read");

    // create an executor environment with the byte array as input
    println!("Creating executor environment with input from stories15M.bin and tokenizer.bin");
    let env = ExecutorEnv::builder().write(&ckpt_file_bytes).unwrap().write(&tokenizer_file_bytes).unwrap().build().unwrap();
    println!("Executor environment created");

    // Obtain the default prover.
    println!("Generating proof of guest execution");
    let prover = default_prover();

    // Produce a receipt by proving the specified ELF binary.
    println!("Proving ELF binary");
    let receipt = prover.prove_elf(env, HELLO_GUEST_ELF).unwrap();

    // TODO: Implement code for retrieving receipt journal here.

    // For example:
    let _output: String = receipt.journal.decode().unwrap();

    // Print, notice, after committing to a journal, the private input became public
    println!("Hello, world! I generated a proof of guest execution! {} is a public output from journal ", _output);

    // Optional: Verify receipt to confirm that recipients will also be able to
    // verify your receipt
    receipt.verify(HELLO_GUEST_ID).unwrap();
}
